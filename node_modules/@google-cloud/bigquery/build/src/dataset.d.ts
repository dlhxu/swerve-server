/*!
 * Copyright 2014 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { DeleteCallback, ServiceObject } from '@google-cloud/common';
import { ResourceStream } from '@google-cloud/paginator';
import * as r from 'request';
import { Duplex } from 'stream';
import { BigQuery, PagedCallback, PagedRequest, PagedResponse, Query, QueryRowsResponse, ResourceCallback, SimpleQueryRowsCallback } from '.';
import { JobCallback, JobResponse, Table, TableMetadata, TableOptions } from './table';
import bigquery from './types';
export interface DatasetDeleteOptions {
    force?: boolean;
}
export interface DatasetOptions {
    location?: string;
}
export declare type CreateDatasetOptions = bigquery.IDataset;
export declare type GetTablesOptions = PagedRequest<bigquery.tables.IListParams>;
export declare type GetTablesResponse = PagedResponse<Table, GetTablesOptions, bigquery.ITableList>;
export declare type GetTablesCallback = PagedCallback<Table, GetTablesOptions, bigquery.ITableList>;
export declare type TableResponse = [Table, bigquery.ITable];
export declare type TableCallback = ResourceCallback<Table, bigquery.ITable>;
/**
 * Interact with your BigQuery dataset. Create a Dataset instance with
 * {@link BigQuery#createDataset} or {@link BigQuery#dataset}.
 *
 * @class
 * @param {BigQuery} bigQuery {@link BigQuery} instance.
 * @param {string} id The ID of the Dataset.
 * @param {object} [options] Dataset options.
 * @param {string} [options.location] The geographic location of the dataset.
 *      Defaults to US.
 *
 * @example
 * const {BigQuery} = require('@google-cloud/bigquery');
 * const bigquery = new BigQuery();
 * const dataset = bigquery.dataset('institutions');
 */
declare class Dataset extends ServiceObject {
    bigQuery: BigQuery;
    location?: string;
    getTablesStream: (options?: GetTablesOptions) => ResourceStream<Table>;
    constructor(bigQuery: BigQuery, id: string, options?: DatasetOptions);
    createQueryJob(options: string | Query): Promise<JobResponse>;
    createQueryJob(options: string | Query, callback: JobCallback): void;
    /**
     * Run a query scoped to your dataset as a readable object stream.
     *
     * See {@link BigQuery#createQueryStream} for full documentation of this
     * method.
     *
     * @param {object} options See {@link BigQuery#createQueryStream} for full
     *     documentation of this method.
     * @returns {stream}
     */
    createQueryStream(options: Query | string): Duplex;
    createTable(id: string, options: TableMetadata): Promise<TableResponse>;
    createTable(id: string, options: TableMetadata, callback: TableCallback): void;
    createTable(id: string, callback: TableCallback): void;
    delete(options?: DatasetDeleteOptions): Promise<[r.Response]>;
    delete(options: DatasetDeleteOptions, callback: DeleteCallback): void;
    delete(callback: DeleteCallback): void;
    /**
     * Get a list of tables.
     *
     * @see [Tables: list API Documentation]{@link https://cloud.google.com/bigquery/docs/reference/v2/tables/list}
     *
     * @param {object} [options] Configuration object.
     * @param {boolean} [options.autoPaginate=true] Have pagination handled automatically.
     * @param {number} [options.maxApiCalls] Maximum number of API calls to make.
     * @param {number} [options.maxResults] Maximum number of results to return.
     * @param {string} [options.pageToken] Token returned from a previous call, to
     *     request the next page of results.
     * @param {function} [callback] The callback function.
     * @param {?error} callback.err An error returned while making this request
     * @param {Table[]} callback.tables The list of tables from
     *     your Dataset.
     * @returns {Promise}
     *
     * @example
     * const {BigQuery} = require('@google-cloud/bigquery');
     * const bigquery = new BigQuery();
     * const dataset = bigquery.dataset('institutions');
     *
     * dataset.getTables((err, tables) => {
     *   // tables is an array of `Table` objects.
     * });
     *
     * //-
     * // To control how many API requests are made and page through the results
     * // manually, set `autoPaginate` to `false`.
     * //-
     * function manualPaginationCallback(err, tables, nextQuery, apiResponse) {
     *   if (nextQuery) {
     *     // More results exist.
     *     dataset.getTables(nextQuery, manualPaginationCallback);
     *   }
     * }
     *
     * dataset.getTables({
     *   autoPaginate: false
     * }, manualPaginationCallback);
     *
     * //-
     * // If the callback is omitted, we'll return a Promise.
     * //-
     * dataset.getTables().then((data) => {
     *   const tables = data[0];
     * });
     */
    getTables(options?: GetTablesOptions): Promise<GetTablesResponse>;
    getTables(options: GetTablesOptions, callback: GetTablesCallback): void;
    getTables(callback: GetTablesCallback): void;
    /**
     * Run a query scoped to your dataset.
     *
     * See {@link BigQuery#query} for full documentation of this method.
     *
     * @param {object} options See {@link BigQuery#query} for full documentation of this method.
     * @param {function} [callback] See {@link BigQuery#query} for full documentation of this method.
     * @returns {Promise} See {@link BigQuery#query} for full documentation of this method.
     */
    query(options: Query): Promise<QueryRowsResponse>;
    query(options: Query, callback: SimpleQueryRowsCallback): void;
    /**
     * Create a Table object.
     *
     * @throws {TypeError} if table ID is missing.
     *
     * @param {string} id The ID of the table.
     * @param {object} [options] Table options.
     * @param {string} [options.location] The geographic location of the table, by
     *      default this value is inherited from the dataset. This can be used to
     *      configure the location of all jobs created through a table instance.
     * It cannot be used to set the actual location of the table. This value will
     *      be superseded by any API responses containing location data for the
     *      table.
     * @return {Table}
     *
     * @example
     * const {BigQuery} = require('@google-cloud/bigquery');
     * const bigquery = new BigQuery();
     * const dataset = bigquery.dataset('institutions');
     *
     * const institutions = dataset.table('institution_data');
     */
    table(id: string, options?: TableOptions): Table;
}
/**
 * Reference to the {@link Dataset} class.
 * @name module:@google-cloud/bigquery.Dataset
 * @see Dataset
 */
export { Dataset };
